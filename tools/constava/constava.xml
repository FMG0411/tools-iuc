<tool id="constava" name="Constava" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@" license="GPL-3.0-only">
    <description>
        calculates conformational state probabilities and variability from protein structure ensembles
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <edam_topics>
        <edam_topic>topic_0130</edam_topic>
    </edam_topics>
    <edam_operations>
        <edam_operation>operation_0249</edam_operation>
    </edam_operations>
    <xrefs>
        <xref type="bio.tools">constava</xref>
        <!-- https://bio.tools/constava -->
    </xrefs>
    <expand macro="requirements"/>
    <version_command>constava --version</version_command>
    <command detect_errors="aggressive" strict="true">
        <![CDATA[
        echo "[Galaxy command block at \$(date +'%Y-%m-%dT%H:%M:%S%z')] Starting Constava Tool execution from Galaxy Platform" &&
        #for $input_file_id, $input_file in enumerate( $input_options.input_files ):
            #set ref_name = str($input_file.element_identifier)
            ln -sv ${input_file} $ref_name &&
        #end for

        #set angle_units = $input_options.input_degrees
        echo "[Galaxy command block at \$(date +'%Y-%m-%dT%H:%M:%S%z')] Constava will use '$angle_units' as angle units (empty means Radians)" &&

        #if str( $conformational_state_model_options.use_custom_model ) == "true":
            echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] Using custom model" &&

            #if str( $conformational_state_model_options.use_custom_input_file ) == "true":
                echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] Using custom input file for data training: $conformational_state_model_options.custom_input_file.element_identifier" &&

                #set custom_input_file_angle_units = $conformational_state_model_options.custom_input_file_degrees
                #set ref_name_train_data = str($conformational_state_model_options.custom_input_file.element_identifier)
                #if str( custom_input_file_angle_units ) != "":
                    #set custom_input_parameter="--input " + str( $conformational_state_model_options.custom_input_file.element_identifier ) + " " + $custom_input_file_angle_units
                #else:
                    #set custom_input_parameter="--input " + str( $conformational_state_model_options.custom_input_file.element_identifier )
                #end if

                ln -sv ${conformational_state_model_options.custom_input_file} $ref_name_train_data &&
            #else:
                echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] Not using custom input file for data training" &&
                #set custom_input_parameter=""
            #end if

            #if str( $conformational_state_model_options.model_type ) == "kde":
                #set model_file = "custom_model.kde.pkl"
                #set load_model_param="--load-model custom_model.kde.pkl"
                echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] Invoking the 'constava fit-model' module command for KDE" &&

                constava fit-model -vv
                    --model-type kde
                    --kde-bandwidth $conformational_state_model_options.bandwidth
                    --output $model_file
                #if str( $custom_input_parameter ) != "":
                $custom_input_parameter &&
                #else:
                &&
                #end if
                echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] The 'constava fit-model' module command for KDE has finished" &&
            #else if str( $conformational_state_model_options.model_type ) == "grid":
                #set model_file = "custom_model.grid.pkl"
                #set load_model_param="--load-model custom_model.grid.pkl"
                echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] Preparing the 'constava fit-model' module command for GRID" &&

                constava fit-model -vv
                    --model-type grid
                    --grid-points $grid_points
                    --kde-bandwidth $conformational_state_model_options.bandwidth
                    --output $model_file
                    #if str( $custom_input_parameter ) != "":
                    $custom_input_parameter &&
                    #else:
                    &&
                    #end if
                echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] The 'constava fit-model' module command for GRID has finished" &&
            #else:
                #set load_model_param=""
            #end if

            #if str( $conformational_state_model_options.use_custom_input_file ) == "true":
                echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] Removing temporary training data $ref_name_train_data" &&
                rm $ref_name_train_data &&
            #end if
        #else:
            echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] Not using custom model" &&
            #set load_model_param=""
        #end if

        echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] Invoking the 'constava analyze' module command" &&

        constava analyze -vv --input
        #for $input_file_id, $input_file in enumerate( $input_files ):
            #set ref_name = str($input_file.element_identifier)
            $ref_name
        #end for
            --input-format $input_options.input_format
            --output output_constava.csv
        #if str( $subsampling_type ) == "window":
            --window $subsampling_options.window_size
        #else if str( $subsampling_type ) == "bootstrap":
            #if str( $return_bootstrap_series ) == "true":
                --bootstrap-series $bootstrap_size
            #else:
                --bootstrap $bootstrap_size
            #end if
            --bootstrap-samples $bootstrap_samples --seed $bootstrap_seed
        #end if
        #if str ($load_model_param ) != "":
            $load_model_param
        #end if
        #if str( $angle_units ) != "":
            $angle_units &&
        #else:
            &&
        #end if

        echo "[Galaxy command block \$(date +"%Y-%m-%dT%H:%M:%S%z")] The 'constava analyze' module command has finished" &&
        echo "[Galaxy command block at \$(date +'%Y-%m-%dT%H:%M:%S%z')] Trying to remove symbolic links and other temporary files" &&
        #for $input_file_id, $input_file in enumerate( $input_options.input_files ):
            #set ref_name = str($input_file.element_identifier)
            rm $ref_name &&
        #end for
        echo "[Galaxy command block at \$(date +'%Y-%m-%dT%H:%M:%S%z')] Constava execution from Galaxy has finished"
        ]]></command>
    <environment_variables>
        <environment_variable name="MPLBACKEND">Agg</environment_variable>
        <environment_variable name="TQDM_DISABLE">1</environment_variable>
        <environment_variable name="PYTHON_TQDM_DISABLE">1</environment_variable>
    </environment_variables>
    <inputs>
        <section name="input_options" title="Input Options" expanded="true" help="As input data the backbone dihedral angles extracted from the conformational ensemble need to be provided. Important: Given Constava extracts RESNAME and RESINDEX from filenames when using XVG format, your files must follow this regex 'ramaPhiPsi([A-Z][A-Z0-9][A-Z0-9])([0-9]+).xvg'">
            <param name="input_files" type="data" format="csv,xvg" label="Dihedral angles file" help="Upload the input file(s) that contain the dihedral angles in CSV or XVG format (GROMACS' `gmx chi` module)." multiple="true"/>
            <param name="input_format" type="select" label="Input file format" help="Select the format of the input file or choose auto to let the system decide based on the file extension and content.">
                <option value="csv" selected="true">CSV</option>
                <option value="xvg">XVG</option>
            </param>
            <param name="input_degrees" type="select" label="Are the dihedral angles in that file in radians or degrees?" help="Indicate if the dihedral angles are in radians or degrees.">
                <option value="--degrees">Degrees</option>
                <option value="" selected="true">Radians</option>
            </param>
        </section>
        <section name="conformational_state_model_options" title="Kernel Options" help="By default, the conformational state models are generated on-the-fly when running Constava. In selected cases generating a model beforehand and loading it can be useful, though.">
            <conditional name="custom_model">
                <param name="use_custom_model" type="select" label="Do you want to train a custom probabilistic model of conformational states?">
                    <option value="false" selected="true">No</option>
                    <option value="true">Yes</option>
                </param>
                <when value="true"> <!-- Yes, train a custom probabilistic model of conformational states-->
                    <conditional name="model_type_options">
                        <param name="model_type" type="select" label="Select a model type" help="We provide two model types. KDE models are the default. They are fast to fit but may be slow in the inference in large conformational ensembles (e.g. long-timescale MD simulations). The idea of Grid models is, to replace the continuous probability density function of the kde-Model by a fixed set of grid-points. The PDF for any sample is then estimated by linear interpolation between the nearest grid points. This is slightly less accurate than the kde-Model but speeds up inference significantly.">
                            <option value="kde">KDE model</option>
                            <option value="grid">Grid model</option>
                        </param>
                        <when value="kde">
                            <param name="bandwidth" type="float" label="Which bandwidth do you want to use?" value="0.13" help="This flag controls the bandwidth of the Gaussian kernel density estimator. (default: 0.13)"/>
                        </when>
                        <when value="grid">
                            <param name="bandwidth" type="float" label="Which bandwidth do you want to use?" value="0.13" help="This flag controls the bandwidth of the Gaussian kernel density estimator. (default: 0.13)"/>
                            <param name="grid_points" type="integer" label="Grid points" value="10000" help="This flag controls how many grid points are used to describe the probability density function. (default: 10000)"/>
                        </when>
                    </conditional>
                    <conditional name="custom_input_json">
                        <param name="use_custom_input_file" type="select" label="Do you want to train probability density functions with custom data?" help="If not, the default data from the publication will be used.">
                            <option value="false" selected="true">No</option>
                            <option value="true">Yes</option>
                        </param>
                        <when value="true">
                            <param name="custom_input_file" type="data" format="json" label="File for pdf fitting in JSON format" help="The data to which the new conformational state models will be fitted. It should be provided as a JSON file. The top-most key should indicate the names of the conformational states. On the level below, lists of phi-psi pairs for each stat should be provided."/>
                            <param name="custom_input_file_degrees" type="select" label="Are the dihedral angles in that file in radians or degrees?" help="Indicate if the dihedral angles of the training data file are in radians or degrees.">
                                <option value="--degrees">Degrees</option>
                                <option value="" selected="true">Radians</option>
                            </param>
                        </when>
                        <when value="false"/>
                    </conditional>
                </when>
                <when value="false"/>
            </conditional>
        </section>
        <section name="subsampling_options" title="Subsampling Options" help="Do inference using either a moving reading-frame of consecutive samples (sliding window) or using a moving reading-frame of consecutive samples (bootstrap).">
            <conditional name="sampling_options">
                <param name="subsampling_type" type="select" label="Select a subsampling method to configure" help="You must select and configure at least one subsampling option.">
                    <option value="window" selected="true">Sliding window</option>
                    <option value="bootstrap">Bootstrap sampling</option>
                </param>
                <when value="window">
                    <param name="window_size" type="text" label="Window size (space-separated integers)" value="3" help="Specify window sizes for moving frame analysis, e.g., '3 5 7'. Each reading frame consists of consecutive samples. Multiple values can be provided."/>
                </when>
                <when value="bootstrap">
                    <param name="bootstrap_size" type="text" label="Bootstrap size (space-separated integers)" value="3" help="Do inference using N samples obtained through bootstrapping. Specify bootstrap sizes, e.g., '10 20 30'. Samples obtained through bootstrapping. Multiple values can be provided."/>
                    <param name="return_bootstrap_series" type="boolean" label="Return bootstrap series calculation" help="Return the results for every subsample rather than the average. This can result in very large output files." value="false"/>
                    <param name="bootstrap_samples" type="integer" label="Bootstrap samples" value="10000" help="When bootstrapping, sample times from the input data."/>
                    <param name="bootstrap_seed" type="integer" label="Bootstrap seed" value="42" help="Set random seed for bootstrap sampling."/>
                </when>
            </conditional>
        </section>
    </inputs>
    <outputs>
        <data name="file_contents" format="csv" label="${tool.name} on ${on_string}: File Contents" from_work_dir="output_constava.csv"/>
    </outputs>
    <tests>
        <!-- ======================================================================= -->
        <!-- Test scenarios: Default PDF -->
        <!-- ======================================================================= -->

        <!-- test_001: CSV Dihedrals in radians with window_size 3 using default PDF -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <assert_command>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --window 3"/>
                <not_has_text text="constava fit-model"/>
            </assert_command>
            <output name="file_contents" file="expected/test_001.csv" ftype="csv"/>
        </test>

        <!-- test_002: XVG Dihedrals in degrees with window_size 3 using default PDF -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="xvg/ramaPhiPsiALA18.xvg,xvg/ramaPhiPsiGLY11.xvg,xvg/ramaPhiPsiLEU45.xvg,xvg/ramaPhiPsiTHR2.xvg,xvg/ramaPhiPsiALA19.xvg,xvg/ramaPhiPsiGLY22.xvg,xvg/ramaPhiPsiLYS16.xvg,xvg/ramaPhiPsiTHR4.xvg,xvg/ramaPhiPsiALA26.xvg,xvg/ramaPhiPsiGLY33.xvg,xvg/ramaPhiPsiLYS44.xvg,xvg/ramaPhiPsiTHR7.xvg,xvg/ramaPhiPsiARG29.xvg,xvg/ramaPhiPsiGLY36.xvg,xvg/ramaPhiPsiLYS48.xvg,xvg/ramaPhiPsiTRP31.xvg,xvg/ramaPhiPsiASN15.xvg,xvg/ramaPhiPsiGLY42.xvg,xvg/ramaPhiPsiLYS49.xvg,xvg/ramaPhiPsiTYR21.xvg,xvg/ramaPhiPsiASN27.xvg,xvg/ramaPhiPsiGLY50.xvg,xvg/ramaPhiPsiLYS9.xvg,xvg/ramaPhiPsiTYR5.xvg,xvg/ramaPhiPsiASN3.xvg,xvg/ramaPhiPsiILE17.xvg,xvg/ramaPhiPsiPHE40.xvg,xvg/ramaPhiPsiTYR6.xvg,xvg/ramaPhiPsiASN32.xvg,xvg/ramaPhiPsiILE34.xvg,xvg/ramaPhiPsiSER10.xvg,xvg/ramaPhiPsiVAL23.xvg,xvg/ramaPhiPsiASP12.xvg,xvg/ramaPhiPsiILE39.xvg,xvg/ramaPhiPsiSER24.xvg,xvg/ramaPhiPsiVAL25.xvg,xvg/ramaPhiPsiASP37.xvg,xvg/ramaPhiPsiILE46.xvg,xvg/ramaPhiPsiSER30.xvg,xvg/ramaPhiPsiVAL41.xvg,xvg/ramaPhiPsiGLN20.xvg,xvg/ramaPhiPsiLEU14.xvg,xvg/ramaPhiPsiSER35.xvg,xvg/ramaPhiPsiVAL47.xvg,xvg/ramaPhiPsiGLN43.xvg,xvg/ramaPhiPsiLEU28.xvg,xvg/ramaPhiPsiSER51.xvg,xvg/ramaPhiPsiVAL8.xvg,xvg/ramaPhiPsiGLY1.xvg,xvg/ramaPhiPsiLEU38.xvg,xvg/ramaPhiPsiTHR13.xvg" ftype="xvg"/>
                <param name="input_format" value="xvg"/>
                <param name="input_degrees" value="--degrees"/>
            </section>
            <assert_command>
                <has_text text="constava analyze -vv --input"/>
                <has_text text="--input-format xvg --output output_constava.csv --window 3 --degrees"/>
                <not_has_text text="constava fit-model"/>
            </assert_command>
            <output name="file_contents" file="expected/test_002.csv" ftype="csv"/>
        </test>

        <!-- ======================================================================= -->
        <!-- Test scenarios: Custom PDF with default training data -->
        <!-- ======================================================================= -->

        <!-- test_003: custom probability density functions: kde -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="true"/>
                    <conditional name="model_type_options">
                        <param name="model_type" value="kde"/>
                        <param name="bandwidth" value="0.15"/>
                    </conditional>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava fit-model -vv --model-type kde --kde-bandwidth 0.15 --output custom_model.kde.pkl"/>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --window 3 --load-model custom_model.kde.pkl"/>
            </assert_command>
            <output name="file_contents" file="expected/test_003.csv" ftype="csv"/>
        </test>

        <!-- test_004: custom probability density functions: grid -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="true"/>
                    <conditional name="model_type_options">
                        <param name="model_type" value="grid"/>
                        <param name="bandwidth" value="0.15"/>
                        <param name="grid_points" value="1500"/>
                    </conditional>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava fit-model -vv --model-type grid --grid-points 1500 --kde-bandwidth 0.15 --output custom_model.grid.pkl"/>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --window 3 --load-model custom_model.grid.pkl"/>
            </assert_command>
            <output name="file_contents" file="expected/test_004.csv" ftype="csv"/>
        </test>

        <!-- ======================================================================= -->
        <!-- Test scenarios: Custom PDF with custom training data in JSON -->
        <!-- ======================================================================= -->

        <!-- test_005: custom probability density functions with custom json: kde -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="true"/>
                    <conditional name="model_type_options">
                        <param name="model_type" value="kde"/>
                        <param name="bandwidth" value="0.15"/>
                    </conditional>
                    <conditional name="custom_input_json">
                        <param name="use_custom_input_file" value="true"/>
                        <param name="custom_input_file" value="custom-training-data/constava_csdata.mini.json"/>
                    </conditional>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava fit-model -vv --model-type kde --kde-bandwidth 0.15 --output custom_model.kde.pkl --input constava_csdata.mini.json"/>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --window 3 --load-model custom_model.kde.pkl"/>
            </assert_command>
            <output name="file_contents" file="expected/test_005.csv" ftype="csv"/>
        </test>

        <!-- test_006: custom probability density functions with custom json: grid -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="true"/>
                    <conditional name="model_type_options">
                        <param name="model_type" value="grid"/>
                        <param name="bandwidth" value="0.15"/>
                        <param name="grid_points" value="1500"/>
                    </conditional>
                    <conditional name="custom_input_json">
                        <param name="use_custom_input_file" value="true"/>
                        <param name="custom_input_file" value="custom-training-data/constava_csdata.mini.json"/>
                    </conditional>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava fit-model -vv --model-type grid --grid-points 1500 --kde-bandwidth 0.15 --output custom_model.grid.pkl --input constava_csdata.mini.json"/>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --window 3 --load-model custom_model.grid.pkl"/>
            </assert_command>
            <output name="file_contents" file="expected/test_006.csv" ftype="csv"/>
        </test>
        <!-- ======================================================================= -->
        <!-- Test scenarios: Default PDF with bootstrap -->
        <!-- ======================================================================= -->

        <!-- test_007: CSV Dihedrals in radians with bootstrap with default train data -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="false"/>
                </conditional>
            </section>
            <section name="subsampling_options">
                <conditional name="sampling_options">
                    <param name="subsampling_type" value="bootstrap"/>
                    <param name="bootstrap_size" value="3"/>
                    <param name="return_bootstrap_series" value="false"/>
                    <param name="bootstrap_samples" value="10"/>
                    <param name="bootstrap_seed" value="89"/>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --bootstrap 3 --bootstrap-samples 10 --seed 89"/>
                <not_has_text text="constava fit-model"/>
            </assert_command>
            <output name="file_contents" file="expected/test_007.csv" ftype="csv"/>
        </test>

        <!-- test_008: CSV Dihedrals in radians with bootstrap series with default train data -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="false"/>
                </conditional>
            </section>
            <section name="subsampling_options">
                <conditional name="sampling_options">
                    <param name="subsampling_type" value="bootstrap"/>
                    <param name="bootstrap_size" value="3"/>
                    <param name="return_bootstrap_series" value="true"/>
                    <param name="bootstrap_samples" value="10"/>
                    <param name="bootstrap_seed" value="89"/>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --bootstrap-series 3 --bootstrap-samples 10 --seed 89"/>
                <not_has_text text="constava fit-model"/>
            </assert_command>
            <output name="file_contents" file="expected/test_008.csv" ftype="csv"/>
        </test>

        <!-- ======================================================================= -->
        <!-- Test scenarios: Custom PDF with bootstrap -->
        <!-- ======================================================================= -->

        <!-- test_009: CSV Dihedrals in radians with bootstrap using custom PDF (kde) using default data to train the PDF -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="true"/>
                    <conditional name="model_type_options">
                        <param name="model_type" value="kde"/>
                        <param name="bandwidth" value="0.15"/>
                    </conditional>
                </conditional>
            </section>
            <section name="subsampling_options">
                <conditional name="sampling_options">
                    <param name="subsampling_type" value="bootstrap"/>
                    <param name="bootstrap_size" value="3"/>
                    <param name="return_bootstrap_series" value="false"/>
                    <param name="bootstrap_samples" value="10"/>
                    <param name="bootstrap_seed" value="89"/>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava fit-model -vv --model-type kde --kde-bandwidth 0.15 --output custom_model.kde.pkl"/>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --bootstrap 3 --bootstrap-samples 10 --seed 89 --load-model custom_model.kde.pkl"/>
            </assert_command>
            <output name="file_contents" file="expected/test_009.csv" ftype="csv"/>
        </test>

        <!-- test_010: CSV Dihedrals in radians with bootstrap using custom PDF (kde) using custom training data in json -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="true"/>
                    <conditional name="model_type_options">
                        <param name="model_type" value="kde"/>
                        <param name="bandwidth" value="0.15"/>
                    </conditional>
                    <conditional name="custom_input_json">
                        <param name="use_custom_input_file" value="true"/>
                        <param name="custom_input_file" value="custom-training-data/constava_csdata.mini.json"/>
                    </conditional>
                </conditional>
            </section>
            <section name="subsampling_options">
                <conditional name="sampling_options">
                    <param name="subsampling_type" value="bootstrap"/>
                    <param name="bootstrap_size" value="3"/>
                    <param name="return_bootstrap_series" value="false"/>
                    <param name="bootstrap_samples" value="10"/>
                    <param name="bootstrap_seed" value="89"/>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava fit-model -vv --model-type kde --kde-bandwidth 0.15 --output custom_model.kde.pkl --input constava_csdata.mini.json"/>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --bootstrap 3 --bootstrap-samples 10 --seed 89 --load-model custom_model.kde.pkl"/>
            </assert_command>
            <output name="file_contents" file="expected/test_010.csv" ftype="csv"/>
        </test>

        <!-- test_011: CSV Dihedrals in radians with bootstrap series using custom PDF (kde) using default data to train the PDF -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="true"/>
                    <conditional name="model_type_options">
                        <param name="model_type" value="kde"/>
                        <param name="bandwidth" value="0.15"/>
                    </conditional>
                </conditional>
            </section>
            <section name="subsampling_options">
                <conditional name="sampling_options">
                    <param name="subsampling_type" value="bootstrap"/>
                    <param name="bootstrap_size" value="3"/>
                    <param name="return_bootstrap_series" value="true"/>
                    <param name="bootstrap_samples" value="10"/>
                    <param name="bootstrap_seed" value="89"/>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava fit-model -vv --model-type kde --kde-bandwidth 0.15 --output custom_model.kde.pkl"/>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --bootstrap-series 3 --bootstrap-samples 10 --seed 89 --load-model custom_model.kde.pkl"/>
            </assert_command>
            <output name="file_contents" file="expected/test_011.csv" ftype="csv"/>
        </test>

        <!-- test_012: CSV Dihedrals in radians with bootstrap series using custom PDF (kde) using custom training data in json -->
        <test expect_num_outputs="1">
            <section name="input_options">
                <param name="input_files" value="csv/dihedrals.mini.csv"/>
                <param name="input_format" value="csv"/>
                <param name="input_degrees" value=""/>
            </section>
            <section name="conformational_state_model_options">
                <conditional name="custom_model">
                    <param name="use_custom_model" value="true"/>
                    <conditional name="model_type_options">
                        <param name="model_type" value="kde"/>
                        <param name="bandwidth" value="0.15"/>
                    </conditional>
                    <conditional name="custom_input_json">
                        <param name="use_custom_input_file" value="true"/>
                        <param name="custom_input_file" value="custom-training-data/constava_csdata.mini.json"/>
                    </conditional>
                </conditional>
            </section>
            <section name="subsampling_options">
                <conditional name="sampling_options">
                    <param name="subsampling_type" value="bootstrap"/>
                    <param name="bootstrap_size" value="3"/>
                    <param name="return_bootstrap_series" value="true"/>
                    <param name="bootstrap_samples" value="10"/>
                    <param name="bootstrap_seed" value="89"/>
                </conditional>
            </section>
            <assert_command>
                <has_text text="constava fit-model -vv --model-type kde --kde-bandwidth 0.15 --output custom_model.kde.pkl --input constava_csdata.mini.json"/>
                <has_text text="constava analyze -vv --input dihedrals.mini.csv --input-format csv --output output_constava.csv --bootstrap-series 3 --bootstrap-samples 10 --seed 89 --load-model custom_model.kde.pkl"/>
            </assert_command>
            <output name="file_contents" file="expected/test_012.csv" ftype="csv"/>
        </test>
    </tests>
    <creator>
        <person name="José Gavalda-Garcia" honorificPrefix="Dr" identifier="0000-0001-6431-3442" url="https://orcid.org/0000-0001-6431-3442"/>
        <person name="David Bickel" honorificPrefix="Dr" identifier="0000-0003-0332-8338" url="https://orcid.org/0000-0003-0332-8338"/>
        <person name="Joel Roca-Martinez" honorificPrefix="Dr" identifier="0000-0002-4313-3845" url="https://orcid.org/0000-0002-4313-3845"/>
        <person name="Daniele Raimondi" honorificPrefix="Dr" identifier="0000-0003-1157-1899" url="https://orcid.org/0000-0003-1157-1899"/>
        <person name="Gabriele Orlando" honorificPrefix="Dr" identifier="0000-0002-5935-5258" url="https://orcid.org/0000-0002-5935-5258"/>
        <person name="Wim F. Vranken" honorificPrefix="Dr" email="wim.vranken@vub.be" identifier="0000-0001-7470-4324" url="https://orcid.org/0000-0001-7470-4324"/>
        <organization name="Bio2Byte, Vrije Universiteit Brussel (VUB)" address="Interuniversity Institute Bioinformatics Brussels, Université Libre de Bruxelles, 1050 Ixelles, Brussels, Belgium" url="https://bio2byte.be/rrmscorer" email="bio2byte@vub.be" image="https://0.gravatar.com/avatar/2b51fb7600d876086669bcc85a941b763a81d1c2bb3c667b8c83a1aa892cf740"/>
    </creator>
    <help><![CDATA[
    *Constava* analyzes conformational ensembles calculating conformational state propensities
    and conformational state variability. The conformational state propensities indicate the likelihood
    of a residue residing in a given conformational state, while the conformational state variability
    is a measure of the residues ability to transition between conformational states.

    Each conformational state is a statistical model of based on the backbone dihedrals (phi, psi).
    The default models were derived from an analysis of NMR ensembles and chemical shifts.
    To analyze a conformational ensemble, the phi- and psi-angles for each conformational state in the ensemble
    need to be provided.

    As input data *Constava* needs the backbone dihedral angles extracted from the conformational ensemble.
    These dihedrals can be obtained using *GROMACS*' gmx chi module (set Input file format as 'xvg')
    or using the Python *Constava* dihedrals submodule, which supports a wide range of MD and structure formats.

    **How to generated Backbone Dihedral files in CSV format?**

    The `constava dihedrals` submodule is used to extract the backbone dihedrals
    needed for the analysis from conformational ensembles. By default the results
    are written out in radians as this is the preferred format for `constava analyze`.

    **Inputs:**

        - **Input files:** Upload the files containing dihedral angles. Supported formats include CSV and XVG.
        - **Input degrees:** Indicate whether the dihedral angles in your input files are in radians or degrees.

    .. class:: infomark

    **Example files:** You can find files in both formats available inside `Data directory on GitHub <https://github.com/Bio2Byte/constava/tree/main/constava/data>`_.


    **Kernel Options:**

        Configure probability density functions (PDFs). You can choose to use predefined PDFs or fit your own PDFs from custom data.

    **Subsampling Options:**

        Set up different subsampling methods like window-based analysis and bootstrap sampling to analyze data variability.

        - **Window size:** Define sizes for moving frame analysis, which could consist of multiple consecutive samples.
        - **Bootstrap size:** Specify sizes for bootstrap methods to enhance statistical robustness.

    **Outputs:**

        - **Output file:** Retrieves the results file that contains calculated variability measures. The format and detail level of this file depend on your configured settings and selections in subsampling options.

        .. class:: warningmark

        **Note:** This tool requires careful setup of parameters to ensure accurate and meaningful results. Default settings are provided for quick setups but might need adjustments based on your specific data and analysis requirements.

    **Project Links:**

    * Source code Repository on `GitHub <https://github.com/Bio2Byte/constava>`_
    * Python Package on `Python Index (PyPI) <https://pypi.org/project/constava/>`_
    * Conda package recipe on `BioConda <https://bioconda.github.io/recipes/constava/README.html>`_
    * Conda package on `Anaconda (BioConda channel) <https://anaconda.org/bioconda/constava>`_
    * Tool profile on `Bio.Tools <https://bio.tools/constava>`_

    **Acknowledgments:**

    We thank the following contributors for the invaluable help in the distribution of this software:

    * Bio2Byte lab:
        * `Adrián Díaz <https://orcid.org/0000-0003-0165-1318>`_
        * Iman Jouiad (University of Poitiers, France)
    * VIB Data Core:
        * `Boris Depoortere <https://orcid.org/0009-0002-2539-116X>`_
        * `Paul De Geest <https://orcid.org/0000-0002-8940-4946>`_
        * `Rafael Andrade Buono <https://orcid.org/0000-0002-6675-3836>`_
    ]]></help>
    <citations>
        <citation type="doi">10.1093/nargab/lqae082</citation>
        <citation type="doi">10.1016/j.jmb.2024.168900</citation>
    </citations>
</tool>
